let barChart = null; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏£‡∏≤‡∏ü
let rooms = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function loadRooms() {
  fetch(`${window.CONFIG.API_URL}/executive/mostroomalldata`)
    .then(response => response.json())
    .then(data => {
      rooms = data.map(item => item.room_id); // ‡πÄ‡∏Å‡πá‡∏ö room_id ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const roomFilter = document.getElementById('roomFilter');

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° option ‡πÉ‡∏ô dropdown
      rooms.forEach(roomId => {
        const option = document.createElement('option');
        option.value = roomId;
        option.textContent = `SC2-${roomId}`; // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á
        roomFilter.appendChild(option);
      });

      filterRoom(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    })
    .catch(err => console.error('Error loading room list:', err));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡∏≤‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
function filterRoom() {
  const roomId = document.getElementById('roomFilter').value;
  const filteredData = roomId ? rooms.filter(room => room === roomId) : rooms;

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏≤‡∏Å API ‡πÇ‡∏î‡∏¢‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡πâ‡∏≠‡∏á
  fetch(`${window.CONFIG.API_URL}/executive/mostroomalldata?room_id=${roomId}`)
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      console.log("Fetched Data:", data); // üõ† Debug: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API
      renderBarChart(data);
    })
    .catch(error => {
      console.error('Error fetching data:', error);
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô renderBarChart ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
function renderBarChart(data) {
  const barCtx = document.getElementById('barChart').getContext('2d');
  if (!barCtx) {
    console.error("‚ùå Canvas element not found!");
    return;
  }

  // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß, ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏°‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
  if (barChart) {
    barChart.destroy();
  }

  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü
  const labels = data.map(item => `SC2-${item.room_id}`);
  const totalCount = data.map(item => item.total_count);
  const csCount = data.map(item => item.cs_count);
  const itCount = data.map(item => item.it_count);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÉ‡∏´‡∏°‡πà
  barChart = new Chart(barCtx, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [
        {
          label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏£‡∏ß‡∏°',
          data: totalCount,
          backgroundColor: '#E5D2BA'
        },
        {
          label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏¥‡∏™‡∏¥‡∏ï ‡∏™‡∏≤‡∏Ç‡∏≤ ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏Ø',
          data: csCount,
          backgroundColor: '#E54715'
        },
        {
          label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏¥‡∏™‡∏¥‡∏ï ‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Ø',
          data: itCount,
          backgroundColor: '#622BBE',
          padding: {
            top: 10,
            bottom: 30
          }
        }
      ]
    },
    options: {
      responsive: false,
      plugins: {
        legend: {
          position: 'bottom',
          labels: {
            font: {
              size: 16
            }
          }
        },
        title: {
          display: true,
          text: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏¥‡∏™‡∏¥‡∏ï',
          font: {
            size: 14
          }
        }
      },
      scales: {
        x: {
          ticks: {
            font: {
              size: 16
            }
          }
        },
        y: {
          beginAtZero: true,
          ticks: {
            callback: function (value) {
              return Math.floor(value);
            },
            font: {
              size: 14
            }
          }
        }
      }
    }
  });
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°
window.addEventListener('DOMContentLoaded', () => {
  loadRooms(); // ‡πÇ‡∏´‡∏•‡∏î‡∏´‡πâ‡∏≠‡∏á
});

//doughnutChart
fetch(`${window.CONFIG.API_URL}/executive/borrowEquipment`)
.then(response => {
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  return response.json();
})
.then(data => {
  console.log("Fetched Data:", data); // üõ† Debug: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API

  const doughnutCtx1 = document.getElementById('doughnutChart1');


  if (!doughnutCtx1) {
    console.error("Canvas element donut not found!");
    return;
  }

  new Chart(doughnutCtx1.getContext('2d'), {  // ‚úÖ ‡πÉ‡∏ä‡πâ .getContext('2d') ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    type: 'doughnut',
    data: {
      labels: data.map(item => item.name), // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      datasets: [{
        data: data.map(item => item.total),
        backgroundColor: ['#E5D2BA', '#E54715', '#622BBE'], // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ
      }]
    },
    options: {
      responsive: true,
      cutout: '50%',
      plugins: {
        legend: { position: 'bottom' },
        title: { display: true, text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°' }
      }
    }
  });
})
.catch(error => {
  console.error("‚ùå Error fetching data:", error);
});
//doughtnut2
fetch(`${window.CONFIG.API_URL}/executive/brokendEquipment`)
.then(response => {
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  return response.json();
})
.then(data => {
  console.log("Fetched Data:", data); // üõ† Debug: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API

  const doughnutCtx1 = document.getElementById('doughnutChart2');


  if (!doughnutCtx1) {
    console.error("Canvas element donut not found!");
    return;
  }

  new Chart(doughnutCtx1.getContext('2d'), {  // ‚úÖ ‡πÉ‡∏ä‡πâ .getContext('2d') ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    type: 'doughnut',
    data: {
      labels: data.map(item => item.name), // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      datasets: [{
        data: data.map(item => item.total),
        backgroundColor: ['#E5D2BA', '#E54715', '#622BBE'], // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ
      }]
    },
    options: {
      responsive: true,

      plugins: {
        legend: { position: 'bottom' },
        title: { display: true, text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°' }
      }

    }
  });
})
.catch(error => {
  console.error("‚ùå Error fetching data:", error);
});
function showDoughnutChart(chartNumber) {
document.getElementById('doughnutChart1').style.display = (chartNumber === 1) ? 'block' : 'none';
document.getElementById('doughnutChart2').style.display = (chartNumber === 2) ? 'block' : 'none';
}
//point line chart
let chartInstance = null; // ‡πÄ‡∏Å‡πá‡∏ö instance ‡∏Ç‡∏≠‡∏á Chart ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà

function showChart(timeframe) {
// ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å URL ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
const apiUrls = {
day: `${window.CONFIG.API_URL}/executive/daysroomday`,
week: `${window.CONFIG.API_URL}/executive/daysroomweek`,
month: `${window.CONFIG.API_URL}/executive/daysroommount`,
year: `${window.CONFIG.API_URL}/executive/daysroomyear`
};

const apiUrl = apiUrls[timeframe];

fetch(apiUrl)
.then(response => {
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  return response.json();
})
.then(data => {
  console.log("Fetched Data:", data); // Debug ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API

  const labels = data.map(item => item.time); // ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô
  const usageData = data.map(item => item.total_requests); // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á

  updateChart(labels, usageData, timeframe);
})
.catch(error => {
  console.error("‚ùå Error fetching data:", error);
});
}

function updateChart(labels, values, timeframe) {
const ctx = document.getElementById("pointLineChart").getContext("2d");

// ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Chart ‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏Å‡πà‡∏≠‡∏ô
if (chartInstance) {
chartInstance.destroy();
}

// ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠ Title ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
const titles = {
day: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô",
week: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
month: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
year: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏µ"
};

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Line Chart ‡πÉ‡∏´‡∏°‡πà
chartInstance = new Chart(ctx, {
type: "line",
data: {
  labels: labels,
  datasets: [{
    label: titles[timeframe],
    data: values,
    borderColor: "#007BFF",  // üîµ ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
    backgroundColor: "rgba(0, 123, 255, 0.2)",
    fill: false,  // üî• ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÉ‡∏ï‡πâ‡πÄ‡∏™‡πâ‡∏ô
    pointStyle: "circle",
    pointRadius: 5, // ‡∏à‡∏∏‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
    pointBackgroundColor: "#007BFF",
  }]
},
options: {
  responsive: false,
  layout: {
    padding: {
      bottom: 0 // ‚úÖ ‡∏•‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á
    }
  },
  plugins: {
    title: {
      display: true,
      text: titles[timeframe]
    },
    legend: {
      position: "bottom"
    }
  },
  scales: {
    x: {
      title: {
        display: true,
        text: "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤"
      }
    },
    y: {
      beginAtZero: true,
      suggestedMin: 0,
      title: {
        display: true,
        text: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á"
      }
    }
  }
}
});
}

// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏ß‡∏±‡∏ô"
showChart("day");

//mostuser

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏à‡∏≤‡∏Å API
function loadRoomAndRoleData() {
    fetch(`${window.CONFIG.API_URL}/executive/getRoomsAndRoles`)  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å API
        .then(response => response.json())
        .then(data => {
            // ‡∏Å‡∏£‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
            const uniqueRooms = new Set();
            const rooms = data.rooms.filter(room => {
                if (uniqueRooms.has(room.room_id)) {
                    return false;  // ‡∏ñ‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡πâ‡∏ß, ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                } else {
                    uniqueRooms.add(room.room_id);  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥, ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏•‡∏á‡πÉ‡∏ô Set
                    return true;
                }
            });

            // ‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô dropdown
            const roomSelect = document.getElementById("room");
            rooms.forEach(room => {
                const option = document.createElement("option");
                option.value = room.room_id;  // ‡πÉ‡∏ä‡πâ room.room_id
                option.textContent = room.room_id;  // ‡πÉ‡∏ä‡πâ room.label
                roomSelect.appendChild(option);
            });
        })
        .catch(error => {
            console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡πâ‡∏≠‡∏á:", error);
        });
}




// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å API
function fetchUserData(room, role) {
    const url = new URL(`${window.CONFIG.API_URL}/executive/useralldata`);
    const params = new URLSearchParams();

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡πÉ‡∏ô query string
    if (room) {
        params.append('room', room);
    }
    if (role) {
        params.append('role', role);
    }

    url.search = params.toString();  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏ô URL

    fetch(url)
        .then(response => response.json())
        .then(data => {
            const userList = document.getElementById("userList");
            userList.innerHTML = "";  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°

            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
            data.forEach(user => {
                const div = document.createElement("div");
                div.className = "split-container";
                div.innerHTML = `<p>${user.name}</p> <p>${user.stat} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>`;
                userList.appendChild(div);
            });
        })
        .catch(error => {
            console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
            document.getElementById("userList").innerHTML = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ";
        });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Å‡∏£‡∏≠‡∏á
function applyFilters() {
    const room = document.getElementById("room").value;  // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const role = document.getElementById("role").value;  // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    fetchUserData(room, role);  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡∏ï‡∏≤‡∏°‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏™‡∏î‡∏á
document.addEventListener("DOMContentLoaded", function() {
    loadRoomAndRoleData();  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î
    applyFilters();  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
});

//most booking room card
fetch(`${window.CONFIG.API_URL}/executive/box1`)
.then(response => {
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  return response.json();
})
.then(data => {
  console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", data);
  if (data.length > 0) {
    document.getElementById('room-name').textContent = `${data[0].name} (${data[0].percentage}%)`;
  } else {
    document.getElementById('room-name').textContent = "No data available";
  }
})
.catch(error => {
  console.error("‚ùå Error fetching data:", error);
  document.getElementById('room-name').textContent = "Error loading data";
});

//most brokend equipment card
fetch(`${window.CONFIG.API_URL}/executive/box2`)
.then(response => {
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  return response.json();
})
.then(data => {
  console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", data);
  if (data.length > 0) {
    document.getElementById('equipment-name').textContent = `${data[0].name} (${data[0].percentage})%`;
  } else {
    document.getElementById('equipment-name').textContent = "No data available";
  }
})
.catch(error => {
  console.error("‚ùå Error fetching data:", error);
  document.getElementById('equipment-name').textContent = "Error loading data";
});
//most time
fetch(`${window.CONFIG.API_URL}/executive/box3`)
.then(response => {
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  return response.json();
})
.then(data => {
  console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", data);
  if (data.length > 0) {
    document.getElementById('time').textContent = `${data[0].time}(${data[0].percentage})%`;
  } else {
    document.getElementById('time').textContent = "No data available";
  }
})
.catch(error => {
  console.error("‚ùå Error fetching data:", error);
  document.getElementById('time').textContent = "Error loading data";
});
//most department
fetch(`${window.CONFIG.API_URL}/executive/box4`)
.then(response => {
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  return response.json();
})
.then(data => {
  console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", data);
  if (data.length > 0) {
    document.getElementById('department-name').textContent = `${data[0].name}(${data[0].percentage}%)`;
  } else {
    document.getElementById('department-name').textContent = "No data available";
  }
})
.catch(error => {
  console.error("‚ùå Error fetching data:", error);
  document.getElementById('department-name').textContent = "Error loading data";
});

function loadTopReporters() {
  const role = document.getElementById("roleFilter").value;
  let url = `${window.CONFIG.API_URL}/executive/mostreport`;

  if (role) {
      url += `?role=${role}`;
  }

  fetch(url)
      .then(response => response.json())
      .then(data => {
          const userList = document.getElementById("ReportList");
          userList.innerHTML = "";

          if (!data || data.length === 0) {
              userList.innerHTML = "<p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>";
              return;
          }

          data.forEach(user => {
              const div = document.createElement("div");
              div.className = "split-container";
              div.innerHTML = `<p>${user.name}</p> <p>${user.stat} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>`;
              userList.appendChild(div);
          });
      })
      .catch(error => {
          console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
          document.getElementById("ReportList").innerHTML = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ";
      });
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
window.onload = loadTopReporters;
