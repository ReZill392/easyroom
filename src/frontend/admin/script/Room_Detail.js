let selectedDesks = new Set();

async function loadDesks() {
  try {
    const response = await fetch(`${API_URL}/admin/data/computer_management`);
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    const desks = await response.json();
    console.log(desks);

    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ room ‡∏à‡∏≤‡∏Å URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const room = urlParams.get("room");
    console.log("Room:", room);

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const filteredDesks = desks.filter((desk) => desk.room_id === room);

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß: 4-3-4 (‡∏£‡∏ß‡∏° 11 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡πà‡∏≠‡πÅ‡∏ñ‡∏ß)
    const pattern = [3, 4, 3];


    const deskGrid = document.getElementById("deskGrid");
    deskGrid.innerHTML = ""; // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤

    let index = 0;
    while (index < filteredDesks.length) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
      const rowDiv = document.createElement("div");
      rowDiv.classList.add("desk-row");

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á checkbox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ñ‡∏ß
      const rowCheckbox = document.createElement("input");
      rowCheckbox.type = "checkbox";
      rowCheckbox.classList.add("row-select");
      // ‡πÄ‡∏Å‡πá‡∏ö desk element ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÑ‡∏ß‡πâ‡πÉ‡∏ô array ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö row checkbox
      let rowDeskElements = [];

      rowCheckbox.addEventListener("change", function () {
        rowDeskElements.forEach((deskElem) => {
          if (deskElem && !deskElem.classList.contains("damaged")) {
            if (
              rowCheckbox.checked &&
              !deskElem.classList.contains("selected")
            ) {
              deskElem.classList.add("selected");
              selectedDesks.add(deskElem.dataset.id);
            } else if (
              !rowCheckbox.checked &&
              deskElem.classList.contains("selected")
            ) {
              deskElem.classList.remove("selected");
              selectedDesks.delete(deskElem.dataset.id);
            }
          }
        });
      });
      rowDiv.appendChild(rowCheckbox);

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏ô‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô (4-3-4)
      pattern.forEach((segCount, segIndex) => {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö segment ‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á (gap) ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
        const segContainer = document.createElement("div");
        segContainer.classList.add("desk-segment");
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î margin-right ‡πÄ‡∏õ‡πá‡∏ô gap (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
        if (segIndex < pattern.length - 1) {
          segContainer.style.marginRight = "50px";
        }

        // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö segment ‡∏ô‡∏µ‡πâ (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö segCount ‡∏Å‡πá‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)
        const segmentDesks = filteredDesks.slice(index, index + segCount);
        index += segCount;

        segmentDesks.forEach((desk) => {
          const deskDiv = document.createElement("div");
          deskDiv.classList.add("desk");
          // ‡πÄ‡∏Å‡πá‡∏ö room_id ‡πÅ‡∏•‡∏∞ id ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô data attribute
          deskDiv.dataset.room = desk.room_id;
          deskDiv.dataset.id = desk.computer_id;
          // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ innerHTML ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå
          deskDiv.innerHTML = `<span class="computer-icon">üñ•Ô∏è</span><span class="computer-id">${desk.computer_id}</span>`;

          if (desk.computer_status === "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ") {
            deskDiv.classList.add("usable");
          } else {
            deskDiv.classList.add("damaged");
          }

          // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å toggleDesk()
          deskDiv.onclick = () => toggleDesk(deskDiv);

          segContainer.appendChild(deskDiv);
          rowDeskElements.push(deskDiv);
        });

        rowDiv.appendChild(segContainer);
      });


      deskGrid.appendChild(rowDiv);
    }
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", error);
  }
}

async function toggleDesk(desk) {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isDamaged = desk.classList.contains("damaged");

  // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏µ‡∏¢ (‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß) ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢ (‡∏™‡∏µ‡πÅ‡∏î‡∏á)
  if (isDamaged || desk.classList.contains("usable")) {
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô UI
    desk.classList.toggle("selected");

    const deskId = desk.dataset.id;
    const roomId = desk.dataset.room;

    console.log('Sending request to update computer status');
    console.log('computer_id:', deskId);
    console.log('room_id:', roomId);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå
    let currentStatus = desk.classList.contains("selected") ? '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' : '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ';

    // ‡∏´‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ" ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ" ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ô
    if (currentStatus === '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ') {
      currentStatus = '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ';
    } else {
      currentStatus = '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ';
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå
    try {
      const response = await fetch(`${API_URL}/admin/updateComputerStatus`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          computer_id: deskId,
          room_id: roomId,
          computer_status: currentStatus
        })
      });

      if (!response.ok) {
        const errorMessage = await response.text();
        throw new Error(`HTTP error! Status: ${response.status}, ${errorMessage}`);
      }

      // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ" ‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡πÑ‡∏õ‡πÉ‡∏ô selectedDesks
      if (currentStatus === '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ') {
        selectedDesks.add(deskId);
        desk.classList.remove("damaged");
        desk.classList.add("usable");
      } else {
        selectedDesks.delete(deskId);
        desk.classList.remove("usable");
        desk.classList.add("damaged");
      }

    } catch (error) {
      console.error("Error updating computer status:", error);
      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå: ${error.message}`);
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï UI ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      desk.classList.toggle("selected");
    }
  }
}

document.addEventListener("DOMContentLoaded", function () {
  const urlParams = new URLSearchParams(window.location.search);
  const roomId = urlParams.get("room");
  console.log("üîç ‡∏Ñ‡πà‡∏≤ roomId ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ:", roomId);

  if (!roomId) {
    console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö roomId ‡πÉ‡∏ô URL");
    return;
  }
});

async function loadEquipments() {
  try {
    const urlParams = new URLSearchParams(window.location.search);
    const room = urlParams.get("room");

    if (!room) {
      throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö room ‡πÉ‡∏ô URL");
    }

    const response = await fetch(`${API_URL}/admin/getEquipments?room=${room}`);
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }

    const equipments = await response.json();
    const equipmentContainer = document.getElementById("equipmentContainer");
    equipmentContainer.innerHTML = ""; // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤

    equipments.forEach((equipment) => {
      const itemContainer = document.createElement("div");
      itemContainer.classList.add("borrow-item");

      const label = document.createElement("label");
      label.textContent = `${equipment.equipment_name} (‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${equipment.stock_quantity}):`;
      itemContainer.appendChild(label);

      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á input field ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏î‡πâ
      const input = document.createElement("input");
      input.type = "number";
      input.value = parseInt(equipment.stock_quantity, 10);
      input.min = 0;
      
      itemContainer.appendChild(input);

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Enter ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á
      input.addEventListener("change", async () => {
        const newQuantity = parseInt(input.value, 10);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        if (isNaN(newQuantity) || newQuantity < 0) {
          alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!");
          input.value = equipment.stock_quantity; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤
          return;
        }

        await updateEquipmentStock(equipment.equipment_id, room, newQuantity);
      });

      equipmentContainer.appendChild(itemContainer);
    });
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:", error);
  }
}

async function updateEquipmentStock(equipmentId, roomId, newQuantity) {
  try {
    console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:", { equipmentId, roomId, newQuantity });

    const response = await fetch(`${API_URL}/admin/updateEquipmentStock`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        equipment_id: equipmentId,
        room_id: roomId,
        new_quantity: newQuantity,
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }

    const data = await response.json();
    console.log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", data);

    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    await loadEquipments();

  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:", error);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener("DOMContentLoaded", loadEquipments);

document.addEventListener("DOMContentLoaded", () => {
  loadDesks();
  loadEquipments();

  const roomId = new URLSearchParams(window.location.search).get("room");
  console.log(roomId);

  if (roomId) {
    document.getElementById("room-name").textContent = `‡∏´‡πâ‡∏≠‡∏á: SC2-${roomId}`;
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Schedule
    document.getElementById("back-btn").href = `Schedule.html?room=${roomId}`;
    console.log(`Loading schedule for room SC2-${roomId}`);
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
function checkTimePeriod() {
  const now = new Date();
  const hour = now.getHours();

  if (hour >= 8 && hour < 16) {
    return "‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤";
  } else if (hour >= 17 && hour <= 20) {
    return "‡∏ô‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤";
  } else {
    return "‚è≥ ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏à‡∏≠‡∏á)";
  }
}

console.log("üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:", checkTimePeriod());