const API_URL = "http://localhost:3000";

async function fetchSchedule() {
    try {
        const roomsFilter = getRoomFromPath(); // ‚úÖ ‡∏î‡∏∂‡∏á roomId ‡∏à‡∏≤‡∏Å URL
        const response = await fetch(`${API_URL}/admin/data/room_schedule?roomId=${roomsFilter}`);
        const scheduleData = await response.json();

        const dayMapping = {
            '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå': 1,
            '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£': 2,
            '‡∏û‡∏∏‡∏ò': 3,
            '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ': 4,
            '‡∏®‡∏∏‡∏Å‡∏£‡πå': 5,
            '‡πÄ‡∏™‡∏≤‡∏£‡πå': 6,
            '‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå': 7
        };

        const reverseDayMapping = {
            1: '‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå',
            2: '‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£',
            3: '‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò',
            4: '‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ',
            5: '‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå',
            6: '‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå',
            7: '‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå'
        };

        const tableBody = document.querySelector('tbody');

        // ‚úÖ ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß
        Array.from(tableBody.rows).forEach((row, index) => {
            const firstCell = row.insertCell(0);
            firstCell.textContent = reverseDayMapping[index + 1] || '';
            firstCell.className = 'text-center fw-bold';
        });

        // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ cell ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        for (let row of tableBody.rows) {
            for (let cell of Array.from(row.cells).slice(1)) {
                if (!cell.hasAttribute('data-status')) {
                    cell.setAttribute('data-status', '‡∏ß‡πà‡∏≤‡∏á');
                    cell.setAttribute('data-id', 'none');
                    updateCellAppearance(cell);
                    cell.onclick = () => changeStatus(cell);
                }
            }
        }

        // ‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å backend
        scheduleData
            .filter(item => item.room_id == roomsFilter)
            .forEach(item => {
                const rawDay = item.week_day || '';
                const dayIndex = dayMapping[rawDay.replace('‡∏ß‡∏±‡∏ô', '').trim()];
                if (!dayIndex) {
                    console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô: ${item.week_day}`);
                    return;
                }

                const startHour = parseInt(item.start_time.split(':')[0], 10);
                const endHour = parseInt(item.end_time.split(':')[0], 10);

                const row = tableBody.rows[dayIndex - 1]; // ‚úÖ ‡∏ï‡∏£‡∏á‡πÅ‡∏ñ‡∏ß‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
                if (!row) return;

                for (let hour = startHour; hour < endHour; hour++) {
                    const cell = row.cells[hour - 8 + 1]; // ‚úÖ offset +1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ cell[0] ‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô
                    if (cell) {
                        cell.setAttribute('data-id', item.room_schedule_id || 'none');
                        cell.setAttribute('data-status', item.room_status);
                        updateCellAppearance(cell);
                        cell.onclick = () => changeStatus(cell);
                    }
                }
            });

    } catch (error) {
        console.error('‚ùå Error fetching schedule:', error);
    }
}


async function changeStatus(cell) {
    const statuses = ['‡∏ß‡πà‡∏≤‡∏á', '‡∏°‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á'];

    let currentStatus = (cell.getAttribute('data-status') || '').trim();
    let currentIndex = statuses.indexOf(currentStatus);
    if (currentIndex === -1) currentIndex = 0;

    let nextStatus = statuses[(currentIndex + 1) % statuses.length];
    const scheduleId = cell.getAttribute('data-id');
    const hour = cell.cellIndex + 8 - 1;
    const startTime = `${hour}:00:00`;
    const endTime = `${hour + 1}:00:00`;
    const roomsFilter = getRoomFromPath();
    const row = cell.parentElement;
    const weekDayText = row.cells[0].textContent.replace('‡∏ß‡∏±‡∏ô', '').trim();

    console.log('üìå cell clicked:', {
        id: scheduleId,
        current: currentStatus,
        next: nextStatus,
        day: weekDayText,
        time: `${startTime} - ${endTime}`
    });

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cell UI ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
    cell.setAttribute('data-status', nextStatus);
    updateCellAppearance(cell);

    try {
        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ scheduleId (new cell)
        if (!scheduleId || scheduleId === 'none') {
            if (nextStatus === '‡∏ß‡πà‡∏≤‡∏á') {
                console.log('üõë ‡∏Ç‡πâ‡∏≤‡∏° insert: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏ß‡πà‡∏≤‡∏á" ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å DB');
                return;
            }

            console.log('üìù Inserting new schedule record...');
            const dataToSend = {
                roomId: roomsFilter,
                weekDay: weekDayText,
                scheduleDate: null,
                startTime: startTime,
                endTime: endTime,
                status: nextStatus
            };

            const response = await fetch(`${API_URL}/admin/insertSchedule`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(dataToSend)
            });

            const result = await response.json();
            if (response.ok) {
                console.log('‚úÖ Inserted schedule:', result);
                cell.setAttribute('data-id', result.newScheduleId);
            } else {
                console.error('‚ùå Insert error:', result.message);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà');
            }
            return;
        }

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏ß‡πà‡∏≤‡∏á" ‚Üí ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å DB
        if (nextStatus === '‡∏ß‡πà‡∏≤‡∏á') {
            console.log('üóë ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• schedule ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å DB');
            const deleteResponse = await fetch(`${API_URL}/admin/deleteSchedule`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ scheduleId })
            });

            if (deleteResponse.ok) {
                console.log('‚úÖ ‡∏•‡∏ö schedule ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                cell.setAttribute('data-id', 'none'); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï id
            } else {
                console.error('‚ùå Error deleting schedule');
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            }
            return;
        }

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏° = ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà ‚Üí ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á update
        if (currentStatus === nextStatus) {
            console.log('‚ö†Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï DB');
            return;
        }

        // ‚úÖ UPDATE
        const updateResponse = await fetch(`${API_URL}/admin/updateScheduleStatus`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                scheduleId: scheduleId,
                status: nextStatus
            })
        });

        if (updateResponse.ok) {
            console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "${nextStatus}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        } else {
            console.error('‚ùå Error updating schedule status');
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
        }
    } catch (error) {
        console.error('‚ùå Network error:', error);
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ');
    }
}



function getRoomFromPath() {
    const pathname = window.location.pathname;
    if (pathname.includes('Schedule307.html')) return '307';
    if (pathname.includes('Schedule308.html')) return '308';
    if (pathname.includes('Schedule414.html')) return '414';
    if (pathname.includes('Schedule407.html')) return '407';
    if (pathname.includes('Schedule411.html')) return '411';
    if (pathname.includes('Schedule415.html')) return '415';
    if (pathname.includes('Schedule314.html')) return '314';
    if (pathname.includes('Schedule313-1.html')) return '313-1';
    if (pathname.includes('Schedule313.html')) return '313';
    if (pathname.includes('Schedule211.html')) return '211';
    if (pathname.includes('Schedule212.html')) return '212';
    if (pathname.includes('Schedule311.html')) return '311';
    return '';
}

function updateCellAppearance(cell) {
    const status = cell.getAttribute('data-status');
    cell.className = 'status-cell';
    switch (status) {
        case '‡∏°‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô':
            cell.classList.add('status-occupied');
            cell.textContent = 'üìö ‡∏°‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô';
            break;
        case '‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á':
            cell.classList.add('status-unavailable');
            cell.textContent = 'üö´ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á';
            break;
        case '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á':
            cell.classList.add('status-maintenance');
            cell.textContent = 'üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á';
            break;
        case '‡∏ß‡πà‡∏≤‡∏á':
            cell.classList.add('status-available');
            cell.textContent = '';
            break;
        default:
            cell.textContent = '-';
    }
}

document.addEventListener("DOMContentLoaded", fetchSchedule);